import streamlit as st
import plotly.express as px
import pandas as pd

# Importando as fun√ß√µes dos m√≥dulos
from src.data_loader import load_data
from src.analysis_utils import prepare_data, train_model, analyze_top_winners, analyze_average_attributes, \
    analyze_win_distribution
from src.analysis_types import analyze_type_win_rate

# --- Constantes de Arquivo ---
FILE_POKEMON_REF = "data/pokemon.xlsx"
FILE_COMBAT_REF = "data/combat_pokemon.xlsx"

# --- Configura√ß√£o ---
st.set_page_config(layout="wide", page_title="An√°lise de Combate Pok√©mon")

st.title("üìä An√°lise de Combate Pok√©mon")

try:
    # 1. Carregamento dos Dados
    df_pokemon, df_combat = load_data(FILE_POKEMON_REF, FILE_COMBAT_REF)

    # 2. An√°lise de Atributos
    st.header("1. Import√¢ncia de Atributos e Status Lend√°rio na Vit√≥ria")

    # Prepara e treina o modelo
    df_final, feature_cols = prepare_data(df_pokemon, df_combat)
    importance_df = train_model(df_final, feature_cols)

    # Gr√°fico de Import√¢ncia
    fig_attr = px.bar(
        importance_df,
        x='Atributo',
        y='Import√¢ncia',
        color='Import√¢ncia',
        color_continuous_scale=px.colors.sequential.Teal,
        title='Import√¢ncia da Diferen√ßa de Atributos e Status Lend√°rio (Random Forest)',
        labels={'Import√¢ncia': 'Import√¢ncia Relativa (%)', 'Atributo': 'Atributo Pok√©mon'}
        # =================================================
    )
    fig_attr.update_layout(xaxis={'categoryorder': 'total descending'}, height=500)
    st.plotly_chart(fig_attr, use_container_width=True)

    # Nova Interpreta√ß√£o
    st.markdown("### Interpreta√ß√£o da Import√¢ncia")
    st.markdown("""
        A altura da barra indica o quanto o atributo ou status contribui para prever o vencedor da batalha.
        * **Velocidade (Speed)**: Proporciona uma vantagem absurda se comparada com os demais atributos.
        * **Atributos Ofensivos**: **Attack** e **Sp.attack** oferecem uma vantagem maior se comparados com os **atributos defensivos**, como **Defense** e **Sp.defense**. 
        * **Prioridade**: Para montar uma equipe vencedora √© ideal priorizar por Pok√©mon's com altos n√≠veis em velocidade e status ofensivos.  
        """)
    st.markdown("---")

    # 3. An√°lise de Tipos
    st.header("2. Taxa de Vit√≥ria por Tipo de Pok√©mon")
    st.markdown("""
    Esta an√°lise calcula a porcentagem de vit√≥rias para cada Tipo (considerando Tipos prim√°rio e secund√°rio) em todos os combates.
    """)

    df_win_rate = analyze_type_win_rate(df_pokemon, df_combat)

    # Gr√°fico de Taxa de Vit√≥ria
    fig_type = px.bar(
        df_win_rate,
        x='Tipo',
        y='Taxa de Vit√≥ria (%)',
        color='Taxa de Vit√≥ria (%)',
        color_continuous_scale=px.colors.sequential.Viridis,
        title='Taxa de Vit√≥ria M√©dia por Tipo de Pok√©mon',
        hover_data=['Total de Combates', 'Total de Vit√≥rias']
    )
    fig_type.update_layout(xaxis={'categoryorder': 'total descending'},
                           height=550, yaxis_range=[30, df_win_rate['Taxa de Vit√≥ria (%)'].max() * 1.05])

    st.plotly_chart(fig_type, use_container_width=True)

    # Nova Interpreta√ß√£o
    st.markdown("### Interpreta√ß√£o da Import√¢ncia")
    st.markdown("""
        A altura da barra indica o quanto o tipo do pokemon contribui para prever o vencedor da batalha.
        * Podemos perceber claramente os tipos de pokemon's mais vencedores, sendo o principal o tipo Flying (Voador).
        * Demais pok√©mon's dos tipos Dragon, Dark, Eletric s√£o uma √≥tima escolha para montar uma equipe vencedora 
        """)

    with st.expander("Ver Tabela de Taxas de Vit√≥ria"):
        st.dataframe(df_win_rate)

    st.markdown("---")

    # --- Se√ß√£o 3: Top N Vencedores ---
    st.header("3. ü•á Top N Pok√©mon com Mais Vit√≥rias (Barra Horizontal)")

    df_sorted_winners = analyze_top_winners(df_pokemon, df_combat)

    # Adiciona o Slider
    max_pokemons = len(df_sorted_winners)
    top_n = st.slider(
        'Selecione o n√∫mero de Pok√©mon a serem exibidos (Top N):',
        min_value=5,
        max_value=min(25, max_pokemons),
        value=10,
        step=1
    )

    st.markdown(f"**Exibindo os Top {top_n} Pok√©mon** com o maior n√∫mero de vit√≥rias.")

    df_top_winners = df_sorted_winners.head(top_n)

    # C√ìDIGO: GR√ÅFICO DE BARRA HORIZONTAL
    fig_winners = px.bar(
        df_top_winners,
        x='Total de Vit√≥rias',  # X agora √© o valor (vit√≥rias)
        y='name',  # Y agora s√£o os nomes dos Pok√©mon
        orientation='h',  # Define como horizontal
        color='Total de Vit√≥rias',
        color_continuous_scale=px.colors.sequential.Sunset,
        title=f'Top {top_n} Pok√©mon pelo N√∫mero Absoluto de Vit√≥rias',
        labels={'name': 'Pok√©mon', 'Total de Vit√≥rias': 'Total de Vit√≥rias'},
        hover_data=['Taxa de Vit√≥ria (%)', 'Total de Combates']
    )

    # Inverte o eixo Y para ter o Pok√©mon #1 no topo
    fig_winners.update_layout(yaxis={'categoryorder': 'total ascending'},
                              height=550, xaxis_range=[110, df_top_winners['Total de Vit√≥rias'].max() * 1.01])

    st.plotly_chart(fig_winners, use_container_width=True)

    # Nova Interpreta√ß√£o
    st.markdown("### Interpreta√ß√£o da Import√¢ncia")
    st.markdown("""
            O comprimento da barra indica quantas vit√≥rias tem um determinado Pok√©mon em combate.
            * Podemos perceber claramente que o Pok√©mon Mewtwo √© disparado um Pok√©mon com uma taxa de vit√≥ria alt√≠ssima comparado com os demais.
            * Demais pok√©mon's como Aerodactyl, Infernape, Jirachi tamb√©m s√£o Pok√©mon's com bastante v√≠torias em combate. 
            """)

    with st.expander(f"Ver Tabela dos Top {top_n} Vencedores"):
        st.dataframe(df_top_winners.set_index('id'))

    st.markdown("---")

    # --- Se√ß√£o 4: Comparativo de Atributos M√©dios ---
    st.header("4. üï∏Ô∏è Comparativo: Perfil M√©dio de Atributos (Radar Chart)")
    st.markdown("""
    Este gr√°fico de teia (Radar Chart) mostra o *perfil* de atributos m√©dios para Pok√©mon Lend√°rios, N√£o Lend√°rios e a M√©dia Geral.
    O formato do pol√≠gono visualiza a superioridade relativa em cada atributo.
    """)

    df_avg_attr = analyze_average_attributes(df_pokemon)

    # Define a ordem desejada e as cores (reutilizamos as defini√ß√µes anteriores)
    status_order = ["N√£o Lend√°rio", "M√©dia Geral", "Lend√°rio"]
    color_map = {
        "N√£o Lend√°rio": "#3336DE",
        "M√©dia Geral": "#33a02c",
        "Lend√°rio": "#e31a1c"
    }

    # Ordena o DataFrame (IMPORTANTE para o Plotly)
    df_avg_attr['Status'] = pd.Categorical(df_avg_attr['Status'], categories=status_order, ordered=True)
    df_avg_attr = df_avg_attr.sort_values(['Atributo', 'Status'])

    # === GR√ÅFICO DE TEIA (RADAR CHART) ===
    fig_avg = px.line_polar(
        df_avg_attr,
        r='M√©dia do Atributo',  # O raio (dist√¢ncia do centro)
        theta='Atributo',  # O √¢ngulo (os atributos: HP, Attack, etc.)
        color='Status',  # As diferentes linhas/pol√≠gonos
        line_close=True,  # Fecha o pol√≠gono
        color_discrete_map=color_map,
        title='Perfil dos Atributos de Pok√©mon: Lend√°rios, N√£o Lend√°rios e M√©dia Geral'
    )

    fig_avg.update_traces(fill='toself')  # Preenche a √°rea do pol√≠gono
    fig_avg.update_layout(height=650)  # Altura maior √© melhor para Radar Chart

    st.plotly_chart(fig_avg, use_container_width=True)

    st.subheader("Interpreta√ß√£o:")
    st.markdown(f"""
        O gr√°fico demonstra claramente que Pok√©mon Lend√°rios possuem, em m√©dia, atributos significativamente superiores em todas as categorias (HP, Attack, Defense, etc.) quando comparados aos N√£o Lend√°rios.
        * **Pok√©mon lend√°rio**: Apresenta no geral atributos 30% superior do que um Pok√©mon n√£o lend√°rio. 
        """)

    st.markdown("---")

    # --- NOVA SE√á√ÉO 5: Distribui√ß√£o de Vit√≥rias ---
    st.header("5. üìà Distribui√ß√£o de Vit√≥rias por Pok√©mon (Concentra√ß√£o de Poder)")
    st.markdown("""
        Este histograma mostra a frequ√™ncia (o n√∫mero de Pok√©mon) que se enquadra em diferentes faixas de vit√≥rias. 
        Uma distribui√ß√£o "alta" em vit√≥rias baixas e "rabo longo" em vit√≥rias altas indica que pouqu√≠ssimos Pok√©mon concentram a maioria dos sucessos.
        """)

    df_win_dist = analyze_win_distribution(df_combat)

    # Calcula o n√∫mero de bins (faixas) ideal. 30 √© um bom padr√£o.
    n_bins = 30

    fig_dist = px.histogram(
        df_win_dist,
        x='Total de Vit√≥rias',
        nbins=n_bins,
        title='Distribui√ß√£o da Contagem de Vit√≥rias entre todos os Pok√©mon',
        labels={'Total de Vit√≥rias': 'N√∫mero de Vit√≥rias por Pok√©mon', 'count': 'N√∫mero de Pok√©mon nessa Faixa'},
        color_discrete_sequence=['#4c78a8']  # Cor simples
    )

    fig_dist.update_layout(bargap=0.05, height=550)  # Espa√ßamento entre as barras

    st.plotly_chart(fig_dist, use_container_width=True)

    st.subheader("Interpreta√ß√£o da Distribui√ß√£o:")
    st.markdown("""
        * **Pico √† Esquerda:** O pico mais alto (√† esquerda) representa o grande n√∫mero de Pok√©mon que possuem poucas vit√≥rias, ou at√© nenhuma vit√≥ria (se o modelo permitisse).
        * **Cauda Longa (Long Tail):** A cauda da distribui√ß√£o, estendendo-se para a direita, indica os Pok√©mon de elite (os Lend√°rios e Top Atributos) que conseguem um n√∫mero desproporcionalmente alto de vit√≥rias.
        """)

    st.markdown("---")

    # --- Se√ß√£o 6: Conclus√£o e Montagem da Equipe Ideal ---
    st.header("6. üèÜ Conclus√£o: Montagem da Equipe Ideal")
    st.markdown("""
        Uma equipe padr√£o em Pok√©mon √© composta por 6 Pok√©mons's, 
        com base nas an√°lises de import√¢ncia de atributos, taxa de vit√≥ria por tipo e desempenho individual, propomos uma equipe de 6 Pok√©mon com a maior probabilidade de sucesso.
        """)

    st.subheader("üß© Passo 1 ‚Äì Fatores que Mais Influenciam a Vit√≥ria")
    data_fatores = {
        'Fator de Influ√™ncia': [
            'Speed (Velocidade)',
            'Attack / Sp. Attack',
            'Ser Lend√°rio',
            'Tipos Dominantes'
        ],
        'Descri√ß√£o/Impacto': [
            'ü•á Mais determinante (cerca de 74% da import√¢ncia total no modelo Random Forest)',
            'ü•à Alta influ√™ncia ofensiva',
            'üèÜ Aumenta as chances de vit√≥ria em +30%',
            'Flying, Dragon, Dark, Psychic, Fire, Steel'
        ]
    }
    df_fatores = pd.DataFrame(data_fatores).set_index('Fator de Influ√™ncia')
    st.dataframe(df_fatores)

    st.markdown("""
        ‚û°Ô∏è **Conclus√£o:** A melhor equipe deve priorizar a **Velocidade** combinada com **Alto Ataque**, cobrindo os tipos **Flying / Dragon / Psychic / Dark / Fire / Steel**, de prefer√™ncia com Pok√©mon Lend√°rios ou Mega Evolu√≠dos.
        """)
    st.markdown("""
        ‚û°Ô∏è **Observa√ß√£o:** Pok√©mons com altos atributos em caraterst√≠cas **Defensivas** normalmente n√£o possuem um bom desempenho quando comparado com Pok√©mon's com altos atributos **Ofensivos**, por isso devemos priorizar Pok√©mons ofensivos.
        """)

    st.markdown("---")

    st.subheader("üß† Passo 2 ‚Äì Crit√©rios para Escolher a Equipe")
    st.markdown("""
        Para uma equipe equilibrada e dominante, a sele√ß√£o seguiu as seguintes regras:
        * **2 Ofensivos R√°pidos:** Para garantir a iniciativa e nocautear oponentes fr√°geis.
        * **2 Vers√°teis / H√≠bridos:** Com bom equil√≠brio entre ataque, defesa e velocidade.
        * **2 Tanques Inteligentes:** Defensivos ou com grande "bulk" para absorver dano e cobrir fraquezas.
        * **Cobertura de Tipos:** M√°xima varia√ß√£o de tipos para evitar vulnerabilidades repetidas.
        """)

    st.markdown("---")

    st.subheader("‚öîÔ∏è Passo 3 ‚Äì Equipe Ideal Sugerida")

    data_equipe = {
        'Fun√ß√£o': ['üêâ Ofensivo 1', 'üî• Ofensivo 2', 'üß† Vers√°til 1', '‚öôÔ∏è Vers√°til 2', 'üõ°Ô∏è Tanque 1', 'üåë Tanque 2'],
        'Pok√©mon': ['Mega Rayquaza', 'Infernape', 'Mewtwo', 'Jirachi', 'Mega Salamence', 'Mega Houndoom'],
        'Tipo(s)': ['Dragon / Flying', 'Fire / Fighting', 'Psychic', 'Steel / Psychic', 'Dragon / Flying',
                    'Dark / Fire'],
        'Motivo Principal': [
            'Alt√≠ssimo ataque e velocidade, √≥timo contra quase tudo.',
            'R√°pido e vers√°til, excelente contra Steel, Ice, e Normal.',
            'Domina em Sp. Attack e velocidade, alto winrate individual.',
            'Boa defesa e velocidade, cobertura contra Fairy e Ice.',
            'Excelente bulk e dano, cobre vulnerabilidade de Psychic.',
            'Contra-ataca Psychic e Grass, cobre fraqueza de Steel.'
        ]
    }
    df_equipe = pd.DataFrame(data_equipe)
    st.dataframe(df_equipe, hide_index=True)

    st.markdown("### üß¨ Resultado Esperado:")
    st.markdown("""
        * **Cobertura de Tipos:** Flying, Dragon, Fire, Psychic, Fighting, Steel, Dark.
        * **Taxa Estimada de Vit√≥ria da Equipe (Modelo Agregado):** **~86‚Äì88%**, com base na m√©dia ponderada das vit√≥rias individuais e sinergias de tipo.
        """)
except FileNotFoundError as e:
    st.error(
        f"Erro: Arquivos Excel n√£o encontrados. Verifique se '{FILE_POKEMON_REF}' e '{FILE_COMBAT_REF}' est√£o na mesma pasta do 'app.py' ou se o caminho est√° correto.")
except Exception as e:
    st.error(
        f"Ocorreu um erro na execu√ß√£o do script. Verifique se todas as bibliotecas est√£o instaladas (`pandas`, `openpyxl`, `scikit-learn`, `plotly`).")
    st.exception(e)